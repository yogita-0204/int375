# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N9dvFI9AyUIZAXgcCZT2TNwG6fOsASm_

### Importing Libraries
"""

# core packages for data analysis
import numpy as np
import pandas as pd

# data visualization
import matplotlib.pyplot as plt
import seaborn as sns
from tabulate import tabulate

# ML implication packages
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE
from sklearn.feature_selection import SelectKBest, chi2
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.model_selection import GridSearchCV

# warnings
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv("/content/manufacturing_defect_dataset.csv")
df.head()

df.info()

"""### Variables Description

#### Production Metrics

| **Variable**        | **Description**                             | **Data Type** | **Range**               | **Significance** |
|---------------------|---------------------------------------------|---------------|-------------------------|------------------|
| **ProductionVolume**| Number of units produced per day.           | Integer        | 100 to 1000 units/day   | A higher production volume could potentially impact defect rates, as more <br> units mean more opportunities for defects. |
| **ProductionCost**  | Cost incurred for production per day.       | Float          | $5000 to $20000         | Higher production costs may reflect more sophisticated production techniques <br> or higher material costs, which could influence defect rates. |

#### Supply Chain and Logistics

| **Variable**        | **Description**                             | **Data Type** | **Range**               | **Significance** |
|---------------------|---------------------------------------------|---------------|-------------------------|------------------|
| **SupplierQuality** | Quality ratings of suppliers.               | Float (%)      | 80% to 100%             | Higher supplier quality typically means better materials,<br> which can lead to lower defect rates. |
| **DeliveryDelay**   | Average delay in delivery.                  | Integer        | 0 to 5 days             | Delays in delivery can impact the production schedule and potentially lead to increased defects<br> if materials are rushed or if there is a shortage. |

#### Quality Control and Defect Rates

| **Variable**        | **Description**                             | **Data Type** | **Range**               | **Significance** |
|---------------------|---------------------------------------------|---------------|-------------------------|------------------|
| **DefectRate**      | Defects per thousand units produced.        | Float          | 0.5 to 5.0 defects      | This is the primary measure of product quality.<br> A higher defect rate indicates poorer quality. |
| **QualityScore**    | Overall quality assessment.                 | Float (%)      | 60% to 100%             | A higher quality score reflects better overall product quality<br> and is usually inversely related to the defect rate. |

#### Maintenance and Downtime

| **Variable**        | **Description**                             | **Data Type** | **Range**               | **Significance** |
|---------------------|---------------------------------------------|---------------|-------------------------|------------------|
| **MaintenanceHours**| Hours spent on maintenance per week.        | Integer        | 0 to 24 hours           | Regular maintenance is crucial to ensure machinery operates correctly<br> and to prevent defects. |
| **DowntimePercentage** | Percentage of production downtime.       | Float (%)      | 0% to 5%                | Higher downtime can negatively affect production efficiency<br> and potentially lead to more defects. |

#### Inventory Management

| **Variable**        | **Description**                             | **Data Type** | **Range**               | **Significance** |
|---------------------|---------------------------------------------|---------------|-------------------------|------------------|
| **InventoryTurnover** | Ratio of inventory turnover.              | Float          | 2 to 10                 | A higher inventory turnover rate indicates efficient inventory management <br> and can reduce the risk of stock obsolescence and defects due to stale inventory. |
| **StockoutRate**    | Rate of inventory stockouts.                | Float (%)      | 0% to 10%               | A high stockout rate can disrupt production and potentially lead to defects <br> if the production process is forced to use suboptimal materials or methods. |

#### Workforce Productivity and Safety

| **Variable**        | **Description**                             | **Data Type** | **Range**               | **Significance** |
|---------------------|---------------------------------------------|---------------|-------------------------|------------------|
| **WorkerProductivity** | Productivity level of the workforce.     | Float (%)      | 80% to 100%             | Higher productivity typically indicates a more efficient workforce,<br> which can positively impact defect rates. |
| **SafetyIncidents** | Number of safety incidents per month.       | Integer        | 0 to 10 incidents       | A higher number of safety incidents can indicate poor working conditions,<br> which can impact worker morale and potentially affect product quality. |

#### Energy Consumption and Efficiency

| **Variable**        | **Description**                             | **Data Type** | **Range**               | **Significance** |
|---------------------|---------------------------------------------|---------------|-------------------------|------------------|
| **EnergyConsumption** | Energy consumed in kWh.                  | Float          | 1000 to 5000 kWh        | Energy consumption can impact production costs and efficiency.<br> Efficient energy use can contribute to lower production costs and potentially fewer defects. |
| **EnergyEfficiency** | Efficiency factor of energy usage.         | Float          | 0.1 to 0.5              | Higher energy efficiency indicates that less energy is wasted,<br> which can contribute to better overall production efficiency and lower defect rates. |

#### Additive Manufacturing

| **Variable**        | **Description**                             | **Data Type** | **Range**               | **Significance** |
|---------------------|---------------------------------------------|---------------|-------------------------|------------------|
| **AdditiveProcessTime** | Time taken for additive manufacturing.  | Float (hours)  | 1 to 10 hours           | The duration of the additive manufacturing process can impact overall production efficiency<br> and the potential for defects. |
| **AdditiveMaterialCost** | Cost of additive materials per unit.    | Float ($)      | $100 to $500            | The cost of materials can impact the overall production cost<br> and may influence decisions about process improvements to reduce defects. |

#### Target Variable

| **Variable**        | **Description**                             | **Data Type** | **Range**               | **Significance** |
|---------------------|---------------------------------------------|---------------|-------------------------|------------------|
| **DefectStatus**    | Predicted defect status.                    | Binary         | 0 for Low Defects, 1 for High Defects | This is the variable to predict based on the other metrics in the dataset.<br> It indicates the low level or high level of the defect rates in production. |

### Data Preprocessing
"""

duplicates = df.duplicated()
num_duplicates = duplicates.sum()

duplicates_data = [["Number of duplicate rows", num_duplicates]]

print(tabulate(duplicates_data, headers=["Metric", "Count"], tablefmt="pretty"))

null_counts = df.isnull().sum()

null_counts_data = [["Column", "Null Values"]]
for column, count in null_counts.items():
    null_counts_data.append([column, count])

print(tabulate(null_counts_data, headers="firstrow", tablefmt="pretty"))

"""### Exploratory Data Analysis"""

defect_counts = df['DefectStatus'].value_counts()

custom_labels = {0: 'low defects', 1: 'high defects'}

defect_counts_df = pd.DataFrame({
    'Defect Status': [custom_labels[i] for i in defect_counts.index],
    'Count': defect_counts.values
})

print("Defect counts:")
print(tabulate(defect_counts_df, headers='keys', tablefmt='pretty'))

colors = ['#66b3ff', '#ff6666']

plt.figure(figsize=(10, 7))
wedges, texts, autotexts = plt.pie(
    defect_counts,
    labels=[custom_labels[i] for i in defect_counts.index],
    autopct='%1.1f%%',
    startangle=140,
    colors=colors,
    textprops=dict(color="w")
)

for text in texts + autotexts:
    text.set_fontsize(14)

plt.title('Defect Status - Target Variable Imbalance', fontsize=16)

plt.legend(
    wedges,
    [custom_labels[i] for i in defect_counts.index],
    title="Defect Status",
    loc="center left",
    bbox_to_anchor=(1, 0, 0.5, 1)
)

plt.axis('equal')
plt.show()

"""### Feature Engineering"""

df['CostPerUnit'] = df['ProductionCost'] / df['ProductionVolume']
df['MaintenancePerUnit'] = df['MaintenanceHours'] / df['ProductionVolume']

# Aggregated Metrics
df['QualityDefectRatio'] = df['QualityScore'] / df['DefectRate']
df['TotalProductionCost'] = df['ProductionCost'] + (df['AdditiveMaterialCost'] * df['ProductionVolume'])

# Ratios and Percentages
df['MaintenanceEfficiency'] = df['MaintenanceHours'] / (df['ProductionVolume'] * df['EnergyConsumption'])
df['ProductivityDefectRatio'] = df['WorkerProductivity'] / df['DefectRate']

# Derived Metrics
df['DefectRatePerEnergyUnit'] = df['DefectRate'] / df['EnergyConsumption']

# Additive Manufacturing Efficiency
df['AdditiveEfficiency'] = df['AdditiveProcessTime'] / df['AdditiveMaterialCost']

# Safety and Productivity
df['IncidentsPerWorker'] = df['SafetyIncidents'] / df['WorkerProductivity']

# Downtime Impact
df['DowntimeImpact'] = df['DowntimePercentage'] * df['ProductionVolume']

# Inventory Management
df['EffectiveInventoryTurnover'] = df['InventoryTurnover'] * (1 - df['StockoutRate'])

# Supply Chain Efficiency
df['SupplierEfficiency'] = df['SupplierQuality'] / (1 + df['DeliveryDelay'])

# Categorical Encodings
df['HighQuality'] = (df['QualityScore'] > 90).astype(int)
df['HighDefectRate'] = (df['DefectRate'] > 2.5).astype(int)

"""#### Engineered Features

| **Variable**             | **Description**                                     | **Data Type** | **Calculation**                                                                 | **Significance** |
|--------------------------|-----------------------------------------------------|---------------|--------------------------------------------------------------------------------|------------------|
| **CostPerUnit**          | Production cost per unit produced.                  | Float         | `ProductionCost / ProductionVolume`                                            | This metric helps understand the cost efficiency of production. Lower costs per unit indicate better efficiency and potential impact on defect rates. |
| **MaintenancePerUnit**   | Maintenance hours per unit produced.                | Float         | `MaintenanceHours / ProductionVolume`                                          | Higher maintenance per unit might be indicas on the production issues or aging machinery, which could influence defect rates. |
| **QualityDefectRatio**   | Ratio of quality score to defect rate.              | Float         | `QualityScore / DefectRate`                                                    | This ratio provides insight into the effectiveness of quality control measures. Higher values suggest better quality management relative to defects. |
| **TotalProductionCost**  | Total production cost including additive materials. | Float         | `ProductionCost + (AdditiveMaterialCost * ProductionVolume)`                   | Captures the complete cost picture, accounting for both traditional and additive manufacturing, which affect overall production quality and defect rates. |
| **MaintenanceEfficiency**| Efficiency of maintenance efforts.                  | Float         | `MaintenanceHours / (ProductionVolume * EnergyConsumption)`                    | This metric measures how effectively maintenance activities are supporting production. Higher efficiency suggests better maintenance practices, potentially leading to fewer defects. |
| **ProductivityDefectRatio** | Ratio of worker productivity to defect rate.      | Float         | `WorkerProductivity / DefectRate`                                              | Helps understand the relationship between workforce productivity and defect occurrence. Higher ratios suggest better productivity management and lower defect rates. |
| **DefectRatePerEnergyUnit** | Defect rate per unit of energy consumed.         | Float         | `DefectRate / EnergyConsumption`                                               | This metric indicates the energy efficiency in relation to defects produced. Lower values suggest more efficient energy use with fewer defects. |
| **HighQuality**          | Indicator of high quality score.                    | Binary        | `1 if QualityScore > 90 else 0`                                                | Helps classify instances with high quality scores, which can be used to identify patterns associated with better quality. |
| **HighDefectRate**       | Indicator of high defect rate.                      | Binary        | `1 if DefectRate > 2.5 else 0`                                                 | This metric helps classify instances with high defect rates, which can be used to identify patterns associated with higher defects. |
| **AdditiveEfficiency**   | Efficiency of additive manufacturing.               | Float         | `AdditiveProcessTime / AdditiveMaterialCost`                      | This metric assesses the cost-effectiveness of the additive manufacturing process. Higher efficiency can lead to lower production costs and fewer defects. |
| **IncidentsPerWorker**   | Safety incidents per worker productivity.           | Float         | `SafetyIncidents / WorkerProductivity`                            | This feature helps understand the relationship between safety and productivity. Higher incidents per worker can indicate potential safety issues affecting productivity. |
| **DowntimeImpact**       | Impact of downtime on production volume.            | Float         | `DowntimePercentage * ProductionVolume`                           | This feature captures the effect of downtime on overall production. Higher downtime impact can lead to reduced production efficiency and increased defect rates. |
| **EffectiveInventoryTurnover** | Adjusted inventory turnover considering stockout rate. | Float         | `InventoryTurnover * (1 - StockoutRate)`                          | This metric provides a more accurate measure of inventory turnover by accounting for stockouts, which can affect production continuity and defect rates. |
| **SupplierEfficiency**   | Supplier quality adjusted by delivery delay.        | Float         | `SupplierQuality / (1 + DeliveryDelay)`                           | This feature measures supplier efficiency by considering both quality and delivery performance. Higher supplier efficiency can lead to better production quality and lower defect rates. |

"""

columns_to_drop = [
    'ProductionVolume',
    'ProductionCost',
    'SupplierQuality',
    'DeliveryDelay',
    'DefectRate',
    'QualityScore',
    'MaintenanceHours',
    'DowntimePercentage',
    'InventoryTurnover',
    'StockoutRate',
    'WorkerProductivity',
    'SafetyIncidents',
    'EnergyConsumption',
    'EnergyEfficiency',
    'AdditiveProcessTime',
    'AdditiveMaterialCost'
]
filtered_df = df.drop(columns_to_drop, axis=1)
filtered_df.head()

"""#### Distribution & Relation Between Variables

##### Histogram:

- **Purpose**: To understand the distribution of each numerical variable.
- **What to Check**: Check for skewness, central tendency, spread, and potential outliers.

##### Pairwise Scatter Plot:

- **Purpose**: To visualize pairwise relationships between numerical variables and their distributions.
- **What to Check**: Examine relationships between pairs of variables. Look for patterns, trends, or correlations. Identify any unusual clusters or outliers.

These visuals plot helps in understanding how different numerical variables relate to each other and provides insight into their individual distributions.<br> This comprehensive view is crucial for identifying any patterns or anomalies in the data that may influence defect rates or other key metrics.
"""

# Histogram
numerical_cols = filtered_df.select_dtypes(include=['float64', 'int64']).columns

num_cols = len(numerical_cols)
nrows = int(np.ceil(num_cols / 4))
ncols = min(num_cols, 4)  # Keep the number of columns up to 4

# Create histograms for each numerical column
plt.figure(figsize=(ncols * 5, nrows * 4))

for i, col in enumerate(numerical_cols):
    plt.subplot(nrows, ncols, i + 1)
    sns.histplot(filtered_df[col], bins=30, kde=True)
    plt.title(f'Distribution of {col}')
    plt.xlabel(col)
    plt.ylabel('Frequency')

plt.tight_layout()
plt.show()

# Pairwise Scatter Plot after the filter for comparison
sns.pairplot(filtered_df[numerical_cols], diag_kind='hist')
plt.suptitle('Pair Plot of Numerical Variables', y=1.02)
plt.show()

# Apply the filter
df = df[df['MaintenanceEfficiency'] < 0.00010]
df = df[df['MaintenancePerUnit'] < 0.178]
df = df[df['CostPerUnit'] < 100]
df = df[df['QualityDefectRatio'] < 150]
df = df[df['AdditiveEfficiency'] < 0.07]
df = df[df['DowntimeImpact'] < 4300]

correlation_matrix = df.corr()

plt.figure(figsize=(20, 16))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)

plt.title('Correlation Heatmap of Numerical Variables')
plt.show()

"""#### Traning Data Preparation"""

X = df.drop('DefectStatus', axis=1)
y = df['DefectStatus']

# Use chi-squared test to select top features
best_features = SelectKBest(score_func=chi2, k=10)
X_best = best_features.fit_transform(X, y)

# Splitting the dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X_best, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Handling imbalanced data
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X_train_scaled, y_train)

"""#### Model Selection & Evaluation"""

# Initialize and train the Random Forest Classifier
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(X_resampled, y_resampled)

# Predictions
y_pred = rf_classifier.predict(X_test_scaled)

# Accuracy score
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Confusion matrix and classification report
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_matrix)
print("Classification Report:")
print(classification_report(y_test, y_pred))

"""### Results and Analysis

#### 🎯 Baseline Model Performance
- **Accuracy**: **95%**

#### 🚀 Enhanced Model with Feature Engineering
- **Accuracy**: **96%**

#### ✅ Advantages of Feature Engineering

- 📈 Enhanced Predictive Power
    - **Improvement**: The feature engineering process improved the model’s accuracy from **95%** to **96%**. This suggests that the engineered features captured additional relevant information that enhanced the model's predictive power.

- 🧩 Better Representation of Data
    - **Insight**: Engineering features tailored to the specific context of the dataset helped in revealing hidden patterns that were not apparent with the raw features alone. This better representation of the data can lead to more accurate predictions.

- 🔍 Increased Model Interpretability
    - **Interpretation**: Engineered features often provide more meaningful insights into the data. This can make it easier to understand the factors influencing the model's predictions, aiding in domain-specific decision-making.

#### ⚠️  Disadvantages of Feature Engineering

- **Complexity**: The process of creating and selecting engineered features can be complex and time-consuming. It requires a deep understanding of both the data and domain to ensure the features are relevant and useful.
- **Risk of Overfitting**: Introducing numerous engineered features can increase the risk of overfitting, especially if the features are highly correlated or if there are too many compared to the amount of data.
- **Loss of Original Data**: If not handled carefully, feature engineering might lead to the exclusion of potentially useful original features. This could result in the loss of valuable information that could have improved the model.

##### 🔧 Limitations

- **Data Dependency**: The effectiveness of feature engineering is highly dependent on the specific dataset and domain. What works well for one dataset might not necessarily work for another.
- **Computational Resources**: The process of engineering features and validating their impact can be resource-intensive, requiring additional computational power and time.
- **Overfitting Risk**: While the engineered features improved the model's accuracy in this instance, there is always a risk of overfitting. Regular evaluation and validation are necessary to ensure that improvements in accuracy are genuine and not due to chance.

#### 🏆 Conclusion

The implementation of feature engineering resulted in a notable improvement in model accuracy from **95%** to **96%**. This enhancement underscores the potential benefits of feature engineering in improving model performance by capturing additional relevant patterns in the data.

**In summary**, feature engineering is a powerful technique for improving model performance, but it must be applied thoughtfully. The gains in accuracy observed demonstrate its effectiveness, but ongoing evaluation and validation are critical to ensure that the model remains robust and generalizable.

"""